using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using TestsGeneratorLibrary;

namespace Tests
{
    public class TestsGeneratorTests
    {
        private List<SyntaxNode> roots;
        private List<string> methodList;

        [SetUp]
        public void Setup()
        {
            methodList = new List<string>() { "CanGenerateTest", "GenerateTest" };
            TestsGeneratorScript generator = new TestsGeneratorScript();
            List<TestFile> testFiles = generator.CreateTests(File.ReadAllText("ListGenerator.cs"));
            roots = new List<SyntaxNode>();
            foreach (TestFile testFile in testFiles)
            {
                roots.Add(CSharpSyntaxTree.ParseText(testFile.Code).GetRoot());
            }
        }   

        [Test]
        public void FilesTest()
        {
            Assert.That(roots.Count, Is.EqualTo(1));
        }

        [Test]
        public void ClassTest()
        {
            IEnumerable<ClassDeclarationSyntax> classes = roots[0].DescendantNodes().OfType<ClassDeclarationSyntax>();
            Assert.That(classes.Count(), Is.EqualTo(1));
            foreach (ClassDeclarationSyntax _class in classes)
            {
                Assert.Multiple(() =>
                {
                    Assert.That(_class.Modifiers.Any(SyntaxKind.PublicKeyword), Is.True);
                    Assert.That(_class.Members.Count, Is.EqualTo(2));
                    Assert.That(_class.Identifier.ValueText, Is.EqualTo("ListGeneratorTest"));
                    Assert.That(_class.AttributeLists.ToString(), Is.EqualTo("[TestFixture]"));
                });
            }
        }

        [Test]
        public void MethodTest()
        {
            IEnumerable<MethodDeclarationSyntax> methods = roots[0].DescendantNodes().OfType<MethodDeclarationSyntax>();
            Assert.That(methods.Count(), Is.EqualTo(2));
            foreach (MethodDeclarationSyntax method in methods)
            {
                methodList.Remove(method.Identifier.ValueText);
                Assert.Multiple(() =>
                {
                    Assert.That(method.Modifiers.Any(SyntaxKind.PublicKeyword), Is.True);
                    Assert.That(method.ReturnType.ToString(), Is.EqualTo("void"));
                    Assert.That(method.AttributeLists.ToString(), Is.EqualTo("[Test]"));
                    Assert.That(method.Body.Statements.ToString(), Is.EqualTo("Assert.Fail(\"autogenerated\");"));
                });
            }

            Assert.That(methodList.Count, Is.EqualTo(0));
        }

        [Test]
        public void UsingTest()
        {
            IEnumerable<UsingDirectiveSyntax> usings = roots[0].DescendantNodes().OfType<UsingDirectiveSyntax>();
            Assert.That(usings.Count(), Is.EqualTo(5));
        }
    }
}
