using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGeneratorLibrary
{
    public class TestsGeneratorScript
    {
        public List<TestFile> CreateTests(string sourceCode)
        {
            List<TestFile> list = new();
            SyntaxNode root = CSharpSyntaxTree.ParseText(sourceCode).GetRoot();
            var usings = root.DescendantNodes().OfType<UsingDirectiveSyntax>();
            var namespaces = root.DescendantNodes().OfType<NamespaceDeclarationSyntax>();
            var classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Where(@class => @class.Modifiers.Any(SyntaxKind.PublicKeyword)).ToList();
            var members = classes.Select(CreateTestClass).ToArray();
            for (int i = 0; i < classes.Count; i++)
            {
                CompilationUnitSyntax unit = CompilationUnit()
                    .WithUsings(new SyntaxList<UsingDirectiveSyntax>(usings).
                        Add(UsingDirective(QualifiedName(IdentifierName("NUnit"), IdentifierName("Framework")))).
                        AddRange(namespaces.Select(GetUsingFromNamespace))).
                        AddMembers(members[i]);
                list.Add(new TestFile($"{classes[i].Identifier.Text}Tests.cs", unit.NormalizeWhitespace().ToFullString()));
            }
            return list;
        }

        private UsingDirectiveSyntax GetUsingFromNamespace(NamespaceDeclarationSyntax namespaceDeclaration)
        {
            return UsingDirective(namespaceDeclaration.Name);
        }

        private MemberDeclarationSyntax CreateTestClass(ClassDeclarationSyntax classDeclaration)
        {
            AttributeSyntax attr = Attribute(ParseName("TestFixture"));
            var classNamespace = NamespaceDeclaration(IdentifierName("Tests"));
            if (classDeclaration.Parent is NamespaceDeclarationSyntax ns)
            {
                classNamespace = NamespaceDeclaration(QualifiedName(ns.Name, IdentifierName("Tests")));
            }
            var methods = CreateTestMethods(classDeclaration);
            ClassDeclarationSyntax testClass = ClassDeclaration(classDeclaration.Identifier.Text + "Test").
                                               AddModifiers(Token(SyntaxKind.PublicKeyword)).
                                               AddAttributeLists(AttributeList().AddAttributes(attr)).
                                               AddMembers(methods);
            return classNamespace.AddMembers(testClass);
        }

        private MemberDeclarationSyntax[] CreateTestMethods(SyntaxNode syntaxNode)
        {
            AttributeSyntax attr = Attribute(ParseName("Test"));
            var resultMethods = new List<MemberDeclarationSyntax>();
            var methods = syntaxNode.DescendantNodes().OfType<MethodDeclarationSyntax>().Where(node => node.Modifiers.Any(n => n.IsKind(SyntaxKind.PublicKeyword))).ToList();
            methods.Sort((method1, method2) => string.Compare(method1.Identifier.Text, method2.Identifier.Text, StringComparison.Ordinal));
            var methodIndex = 0;
            for (var i = 0; i < methods.Count; ++i)
            {
                if (i != 0 && methods[i].Identifier.Text == methods[i - 1].Identifier.Text)
                {
                    methodIndex++;
                }
                else if (i != methods.Count - 1 && methods[i].Identifier.Text == methods[i + 1].Identifier.Text)
                {
                    methodIndex = 1;
                }
                else
                {
                    methodIndex = -1;
                }
                var methodName = methods[i].Identifier.Text + (methodIndex != -1 ? $"{methodIndex}" : "");
                MethodDeclarationSyntax testMethod = MethodDeclaration(ParseTypeName("void"), methodName + "Test").
                                                     AddModifiers(Token(SyntaxKind.PublicKeyword)).
                                                     AddBodyStatements(ParseStatement("Assert.Fail(\"autogenerated\");")).
                                                     AddAttributeLists(AttributeList().AddAttributes(attr));
                resultMethods.Add(testMethod);
            }
            return resultMethods.ToArray();
        }
    }
}
